{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RK967NN\\\\OneDrive - EY\\\\Documents\\\\Learnings\\\\ReactTheCompleteGuide\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport { getAllByAltText } from '@testing-library/react';\nimport './ExpenseForm.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const submitHandler = event => {\n    event.preventDefault();\n    const ExpenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    enteredAmount('');\n    enteredDate('');\n    enteredTitle('');\n  };\n  //**************maintaining individual useState*************\n  const [enteredTitle, setEndteredTitle] = useState('');\n  const [enteredAmount, setEndteredAmount] = useState('');\n  const [enteredDate, setEndteredDate] = useState('');\n  const titleChangeHandler = event => {\n    setEndteredTitle(event.target.value);\n  };\n  const amountChangeHandler = event => {\n    setEndteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEndteredDate(event.target.value);\n  };\n\n  // if we want to avoid multiple change handler function, we can write one fucntion for all\n  // and call that fucntion manually on event.\n  // const inputChangeHandler = (type, value) => {\n  //     if(type === 'title'){\n  //         setEndteredTitle(value);\n  //     }else if(type === 'amount'){\n  //         setEndteredAmount(value);\n  //     }else{\n  //         setEndteredDate(value);\n  //     }\n  // }\n\n  /**************keeing all state as an object to useState *********/\n  // const [userInput, setUserInput] = useState({\n  //     enteredDate: '',\n  //     enteredAmount: '',\n  //     enteredTitle: ''\n  // });\n  // const titleChangeHandler = (event) => {\n  //     setUserInput({\n  //         // ... -> this is the spread operator. \n  //         // It is used to maintain the value of other variables in object.\n  //         ...userInput,\n  //         enteredTitle: event.target.value\n  //     })\n  // };\n  // const amountChangeHandler = (event) => {\n  //     setUserInput({\n  //         ...userInput,\n  //         enteredAmount: event.target.value\n  //     })\n  // };\n  // const dateChangeHandler = (event) => {\n  //     setUserInput({\n  //         ...userInput,\n  //         enteredDate: event.target.value\n  //     })\n  // };\n  // React schedules the state update. In case we want to update multiple states it can we a case that \n  // update gets performed on some old state. To make the process sync, we should try to use retrun form\n  // setUserInput function. Example:\n  // so if u r dependent on previous state to update the current state, use this approach:\n  // setUserInput((prevState) =>{\n  //     return(...prevState,\n  //         enteredTitle: event.target.value);\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: enteredAmount,\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: enteredDate,\n          min: \"2021-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(ExpenseForm, \"HOHuJzGIjjPF1x8sg+FJHSII4FU=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["getAllByAltText","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","submitHandler","event","preventDefault","ExpenseData","title","enteredTitle","amount","enteredAmount","date","Date","enteredDate","setEndteredTitle","setEndteredAmount","setEndteredDate","titleChangeHandler","target","value","amountChangeHandler","dateChangeHandler","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["C:/Users/RK967NN/OneDrive - EY/Documents/Learnings/ReactTheCompleteGuide/01-starting-setup/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { getAllByAltText } from '@testing-library/react';\r\nimport './ExpenseForm.css';\r\nimport { useState } from 'react';\r\nconst ExpenseForm = () => {\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        const ExpenseData = {\r\n            title: enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate)\r\n        }\r\n        enteredAmount('');\r\n        enteredDate('');\r\n        enteredTitle('');\r\n    }\r\n    //**************maintaining individual useState*************\r\n    const [enteredTitle, setEndteredTitle] = useState('');\r\n    const [enteredAmount, setEndteredAmount] = useState('');\r\n    const [enteredDate, setEndteredDate] = useState('');\r\n    const titleChangeHandler = (event) => {\r\n        setEndteredTitle(event.target.value);\r\n    };\r\n    const amountChangeHandler = (event) => {\r\n        setEndteredAmount(event.target.value);\r\n    };\r\n    const dateChangeHandler = (event) => {\r\n        setEndteredDate(event.target.value);\r\n    };\r\n\r\n    // if we want to avoid multiple change handler function, we can write one fucntion for all\r\n    // and call that fucntion manually on event.\r\n    // const inputChangeHandler = (type, value) => {\r\n    //     if(type === 'title'){\r\n    //         setEndteredTitle(value);\r\n    //     }else if(type === 'amount'){\r\n    //         setEndteredAmount(value);\r\n    //     }else{\r\n    //         setEndteredDate(value);\r\n    //     }\r\n    // }\r\n\r\n    /**************keeing all state as an object to useState *********/\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enteredDate: '',\r\n    //     enteredAmount: '',\r\n    //     enteredTitle: ''\r\n    // });\r\n    // const titleChangeHandler = (event) => {\r\n    //     setUserInput({\r\n    //         // ... -> this is the spread operator. \r\n    //         // It is used to maintain the value of other variables in object.\r\n    //         ...userInput,\r\n    //         enteredTitle: event.target.value\r\n    //     })\r\n    // };\r\n    // const amountChangeHandler = (event) => {\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enteredAmount: event.target.value\r\n    //     })\r\n    // };\r\n    // const dateChangeHandler = (event) => {\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enteredDate: event.target.value\r\n    //     })\r\n    // };\r\n    // React schedules the state update. In case we want to update multiple states it can we a case that \r\n    // update gets performed on some old state. To make the process sync, we should try to use retrun form\r\n    // setUserInput function. Example:\r\n    // so if u r dependent on previous state to update the current state, use this approach:\r\n    // setUserInput((prevState) =>{\r\n    //     return(...prevState,\r\n    //         enteredTitle: event.target.value);\r\n    // });\r\n\r\n    return(\r\n        <form onSubmit={submitHandler}>\r\n            <div className='new-expense__controls'>\r\n                <div className='new-expense__control'>\r\n                    <label>Title</label>\r\n                    <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\r\n                    {/* <input type='text' onChange={(event) => inputChangeHandler('title',event.target.value)}/> */}\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Amount</label>\r\n                    <input type='number' value={enteredAmount} min='0.01' step='0.01' onChange={amountChangeHandler}/>\r\n                    {/* <input type='number' onChange={(event) => inputChangeHandler('amount',event.target.value)}/> */}\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Date</label>\r\n                    <input type='date' value={enteredDate} min='2021-01-01' max='2023-12-31' onChange={dateChangeHandler}/>\r\n                    {/* <input type='date' onChange={(event) => inputChangeHandler('date',event.target.value)}/> */}\r\n                </div>\r\n            </div>\r\n            <div className='new-expense__actions'>\r\n                <button type='submit'>Add Expense</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}